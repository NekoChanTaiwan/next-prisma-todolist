import React from 'react'
import type { ITodo } from '@/types/todo'
import type { FormContextType, IForm } from '@/types/form'

const initForm: ITodo = {
  id: 0, // id will be generated by prisma
  title: '',
  description: '',
  status: false,
}

const FormContext = React.createContext<FormContextType | null>(null)

export const useFormContext = () => React.useContext(FormContext) as FormContextType

export const FormProvider = ({ children }: { children: React.ReactNode }) => {
  const [createform, setCreateform] = React.useState<ITodo>(initForm)
  const [updateForm, setUpdateForm] = React.useState<ITodo | null>(null)

  const { mode, form, setForm, resetForm } = React.useMemo<IForm>(
    () =>
      updateForm
        ? {
            mode: 'Update',
            form: updateForm,
            setForm: setUpdateForm as React.Dispatch<React.SetStateAction<ITodo>>,
            resetForm: () => setUpdateForm(null),
          }
        : {
            mode: 'Create',
            form: createform,
            setForm: setCreateform,
            resetForm: () => setCreateform(initForm),
          },
    [updateForm, createform]
  )

  return (
    <FormContext.Provider
      value={{
        mode,
        form,
        setForm,
        resetForm,
        setUpdateForm,
      }}
    >
      {children}
    </FormContext.Provider>
  )
}
